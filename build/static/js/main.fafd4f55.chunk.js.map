{"version":3,"sources":["global.ts","Fireworks.tsx","Status.tsx","History.tsx","DropArea.tsx","Help.tsx","Board.tsx","GameSettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameStatus","Fireworks","props","code","game_status","push","className","Status","History","code_tr","tr_ref","React","useRef","i","max_attempts","code_td","code_indicators","j","code_length","key_td","history","length","ind","indicators_history","empty_ind","fullMatches","partialMatches","ref","useEffect","current","scrollIntoView","window","scrollTo","top","left","reverse","generatePreview","itemType","item","style","classNames","toString","DropItem","useDrag","type","console","log","board_ref","classList","add","collect","monitor","opacity","isDragging","end","remove","dragRef","dropItemStyle","id","DropTarget","useDrop","accept","drop","setDropTargetColor","isOver","canDrop","getItem","dropRef","color_id","DropArea","dropTargetsCode","game_settings","current_drop_area_state","dropItemsCode","number_of_colors","dropItemsClassNames","options","HTML5toTouch","generator","onClick","clearAttempt","title","disabled","is_drop_area_filled","addAttemptToHistory","navigate","changeHelpVisibility","Help","is_help_shown","src","alt","Board","createRef","a","this","target_code_exists","Component","GameSettings","name","value","onChange","e","handleGameSettingsChange","htmlFor","defaultChecked","startGame","App","state","can_repeat_colors_in_code","first_init_happened","InProgress","target_code","bind","gs","Object","assign","setState","addEventListener","min","max","new_code","can_repeat_colors_in_code_copy","random_number","Math","floor","random","includes","target","parseInt","new_state","new_target_code","getTargetCode","drop_target_id","drop_area_state","current_codes","slice","reduce","prev","new_history","indicators","calculateIndicators","new_indicators_history","user_code_string","join","target_code_string","Won","Lost","user_attempt","user_colors","Array","fill","target_colors","forEach","el","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fafd4f55.chunk.js","sourcesContent":["//CodeBreak - global.ts\r\n\r\nexport enum GameStatus\r\n{\r\n    InProgress = 1, Won = 2, Lost = 3\r\n};\r\n","//CodeBreak - Fireworks\r\n\r\nimport \"./Fireworks.scss\";\r\n\r\n\r\nfunction Fireworks(props: FireworksProps): JSX.Element\r\n{\r\n\r\n    let code = [];\r\n\r\n    if (props.game_status === 2)\r\n    {\r\n        code.push(<div key=\"0\" className=\"Fireworks\">\r\n            <div key=\"1\" className=\"FireworksBefore\"></div>\r\n            <div key=\"2\" className=\"FireworksAfter\"></div>\r\n        </div>);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"FireworksContainer\">\r\n            {code}\r\n        </div>);\r\n\r\n}\r\n\r\n\r\nexport default Fireworks;","//CodeBreak - Status\r\n\r\nimport \"./Status.scss\";\r\n\r\n\r\nfunction Status(props: StatusProps): JSX.Element\r\n{\r\n\r\n    const status_class = [\"\", \"StatusGameInProgress\", \"StatusGameWon\", \"StatusGameLost\"];\r\n    const status_text = [\"\", \"Game in progress\", \"Game won\", \"Game lost\"];\r\n\r\n\r\n    return (<div className={\"Status \" + status_class[props.game_status]}>\r\n        {status_text[props.game_status]}\r\n    </div>);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Status;","//CodeBreak - History\r\nimport React from 'react';\r\nimport './History.scss';\r\n\r\n\r\n\r\nfunction History(props: HistoryProps): JSX.Element\r\n{\r\n\r\n    let code_tr: Array<JSX.Element> = [];\r\n\r\n    const tr_ref = React.useRef<HTMLTableRowElement>(null);\r\n\r\n    for (let i = 0; i < props.max_attempts; i++)\r\n    {\r\n\r\n        let code_td: Array<JSX.Element> = [];\r\n        let code_indicators: Array<JSX.Element> = [];\r\n\r\n        //first column with attempt number\r\n        code_td.push(<td key={i + \"_-1\"} className=\"historyAttemptId\" >#{i + 1}</td>);\r\n\r\n\r\n        for (let j = 0; j < props.code_length; j++)\r\n        {\r\n            let key_td = `${i}_${j}`;\r\n            if (props.history.length > i)   //row with code break attempt\r\n            {\r\n                code_td.push(<td key={key_td}>\r\n                    <span className={\"codeColor\" + props.history[i][j]}></span>\r\n                </td>);\r\n            }\r\n            else    //empty row\r\n            {\r\n                code_td.push(<td key={key_td}>\r\n                    <span className=\"noColor\"></span>\r\n                </td>);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        const ind: IndicatorHistoryElement = props.indicators_history[i];\r\n        let empty_ind: number = props.code_length;\r\n\r\n        if (ind)\r\n        {\r\n            empty_ind = props.code_length - ind.fullMatches - ind.partialMatches;\r\n            for (let j = 0; j < ind.fullMatches; j++)\r\n            {\r\n                code_indicators.push(<div key={\"indicator_green_\" + i + \"_\" + j} className=\"indicator indicator_green\"></div>);\r\n            }\r\n\r\n            for (let j = 0; j < ind.partialMatches; j++)\r\n            {\r\n                code_indicators.push(<div key={\"indicator_white_\" + i + \"_\" + j} className=\"indicator indicator_white\"></div>);\r\n            }\r\n        }\r\n\r\n\r\n        for (let j = 0; j < empty_ind; j++)\r\n        {\r\n            code_indicators.push(<div key={\"indicator_\" + i + \"_\" + j} className=\"indicator\"></div>);\r\n        }\r\n\r\n\r\n        code_td.push(<td className=\"td_indicators\" key={\"indicator_\" + i}>{code_indicators}</td>);\r\n\r\n        if (i === 0)\r\n        {\r\n            code_tr.push(<tr key={i} ref={tr_ref}>{code_td}</tr>);\r\n        }\r\n        else\r\n        {\r\n            code_tr.push(<tr key={i}>{code_td}</tr>)\r\n        }\r\n\r\n    }\r\n\r\n    React.useEffect(() =>\r\n    {\r\n        if (props.history.length === 0 && tr_ref.current)\r\n        {\r\n            tr_ref.current.scrollIntoView();\r\n        }\r\n\r\n        window.scrollTo({ top: 0, left: 0 });\r\n    });\r\n\r\n    code_tr.reverse();\r\n\r\n\r\n\r\n    return (<div className=\"History\">\r\n        <table>\r\n            <tbody>{code_tr}</tbody>\r\n        </table>\r\n    </div>);\r\n\r\n}\r\n\r\n\r\nexport default History;","//CodeBreak - DropArea\r\n\r\nimport { navigate } from '@reach/router';\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { DndProvider, Preview, PreviewGeneratorArg } from 'react-dnd-multi-backend';\r\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\r\nimport './DropArea.scss';\r\n\r\n\r\n\r\nfunction generatePreview({ itemType, item, style }: PreviewGeneratorArg): JSX.Element\r\n{\r\n    const classNames = \"DropItem DropItemPreview codeColor\" + (item.i).toString();\r\n    return <div className={classNames} style={style}>{item.i}</div>\r\n}\r\n\r\n\r\nfunction DropItem(props: DropItemProps): JSX.Element\r\n{\r\n    const [{ opacity }, dragRef] = useDrag(\r\n        () =>\r\n        {\r\n            return {\r\n                type: \"DropItem\",\r\n                item: () =>\r\n                {\r\n                    console.log(\"drop start\");\r\n                    if (props.board_ref.current)\r\n                    {\r\n                        props.board_ref.current.classList.add(\"dragInProgress\");\r\n                    }\r\n\r\n                    return { i: props.i };\r\n                },\r\n                collect: (monitor) => ({ opacity: monitor.isDragging() ? 0.6 : 1 }),\r\n                end: (item, monitor) =>\r\n                {\r\n                    console.log(\"drop end\");\r\n                    if (props.board_ref.current)\r\n                    {\r\n                        props.board_ref.current.classList.remove(\"dragInProgress\");\r\n                    }\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        [props.i, \"some value\"]);\r\n\r\n\r\n    const classNames = `DropItem codeColor${props.i}`;\r\n\r\n    const dropItemStyle = {\r\n        opacity: opacity\r\n    }\r\n\r\n    return (<div ref={dragRef} style={dropItemStyle}  /* onDragStart={e => handleDragStart(e)} */\r\n        id={\"dropItem\" + props.i} className={classNames}>\r\n        {props.i}</div>);\r\n}\r\n\r\n\r\nfunction DropTarget(props: DropTargetProps): JSX.Element\r\n{\r\n\r\n    const [{ canDrop, isOver, item }, dropRef] = useDrop({\r\n        accept: 'DropItem',\r\n        drop: (item: any /*props, monitor */) =>\r\n        {\r\n\r\n            props.setDropTargetColor(props.i, item.i);\r\n        },\r\n        collect: (monitor) => \r\n        {\r\n            return {\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop(),\r\n                item: monitor.getItem()\r\n            }\r\n        },\r\n    });\r\n\r\n    let classNames = \"DropTargetColorDisplay\";\r\n    if (props.color_id) { classNames += ` codeColor${props.color_id}`; }\r\n    else { classNames += \" noColor\"; }\r\n\r\n    if (isOver) { classNames += \" DropTargetHover\"; }\r\n\r\n    //remove color after click on DropTarget\r\n    return (<div className=\"DropTarget\" ref={dropRef}>\r\n        <div className={classNames}></div>\r\n    </div>);\r\n\r\n}\r\n\r\n\r\n\r\nfunction DropArea(props: DropAreaProps): JSX.Element\r\n{\r\n\r\n    let dropTargetsCode: Array<JSX.Element> = [];\r\n\r\n    for (let i = 0; i < props.game_settings.code_length; i++)\r\n    {\r\n        dropTargetsCode.push(<DropTarget key={i} i={i} color_id={props.current_drop_area_state[i]}\r\n            board_ref={props.board_ref}\r\n            setDropTargetColor={props.setDropTargetColor} />);\r\n    }\r\n\r\n\r\n    let dropItemsCode = [];\r\n\r\n    for (let i = 1; i <= props.game_settings.number_of_colors; i++)\r\n    {\r\n        dropItemsCode.push(<DropItem key={i} i={i} board_ref={props.board_ref} />);\r\n    }\r\n\r\n\r\n    let dropItemsClassNames = \"dropItems\";\r\n    if (props.game_settings.number_of_colors >= 7) { dropItemsClassNames += \" dropItems4Columns\"; }\r\n\r\n    return (<div className=\"DropArea\">\r\n        <DndProvider options={HTML5toTouch}>\r\n\r\n            <Preview generator={generatePreview} />\r\n\r\n            <div className=\"dropTargets\">\r\n                <p>Drag and drop colors here:</p>\r\n                <div className=\"dropTargetsGroup\">\r\n                    {dropTargetsCode}\r\n                    <div className=\"clearAttempt\">\r\n                        <button onClick={() => props.clearAttempt()} title=\"Clear an attempt\"><i className=\"fas fa-trash-alt\"></i></button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className={dropItemsClassNames}>\r\n                {dropItemsCode}\r\n            </div>\r\n        </DndProvider>\r\n        <div className=\"addAttempt\">\r\n            <button disabled={!props.is_drop_area_filled} onClick={() => props.addAttemptToHistory()} title=\"Add an attempt\"><i className=\"fas fa-plus\"></i></button>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"restartGame\">\r\n            <button onClick={() => navigate(\"/\")} title=\"Start a new game\"> <i className=\"fas fa-home\"></i></button>\r\n        </div>\r\n\r\n        <div className=\"showHelp\">\r\n            <button onClick={() => props.changeHelpVisibility(true)} title=\"Show help\"> <i className=\"fas fa-question\"></i></button>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DropArea;","//CodeBreak - Help\r\n\r\nimport \"./Help.scss\";\r\n\r\n\r\nfunction Help(props: HelpProps): JSX.Element\r\n{\r\n\r\n    let code = [] as Array<JSX.Element>;\r\n\r\n    if (props.is_help_shown)\r\n    {\r\n        code.push(<div className=\"Help\" key={1}>\r\n            <button title=\"Close\" className=\"closeHelpButton\" onClick={() => props.changeHelpVisibility(false)}>\r\n                <i className=\"fas fa-times\"></i>\r\n            </button>\r\n\r\n            <h2>Help</h2>\r\n            <p>Drag colors from the bottom panel and drop them in the drop area.</p>\r\n\r\n            <p>When all colors are added, click the button \"Add&nbsp;attempt\":</p>\r\n\r\n            <img src=\"/help/add_attempt.png\" alt=\"Add attempt button\" className=\"helpAddAttemptImage\" />\r\n\r\n            <div className=\"helpImageContainer\">\r\n                <img src=\"/help/white_indicators.png\" alt=\"White indicators\" className=\"helpIndicatorsImage\" />\r\n                <span>White circles indicate correct colors, but in the wrong place.</span>\r\n            </div>\r\n\r\n            <div className=\"helpImageContainer\">\r\n                <img src=\"/help/green_indicators.png\" alt=\"Green indicators\" className=\"helpIndicatorsImage\" />\r\n                <span>Green circles indicate correct colors in the right place.</span>\r\n            </div>\r\n\r\n            <p>Your goal is to break the code in the smallest number of attempts.</p>\r\n\r\n\r\n\r\n        </div>);\r\n    }\r\n\r\n    return (<div className=\"HelpContainer\">{code}</div>);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Help;","//CodeBreak - Board\r\n\r\nimport React from \"react\";\r\nimport \"./Board.scss\";\r\nimport Fireworks from \"./Fireworks\";\r\nimport Status from \"./Status\";\r\nimport History from \"./History\";\r\nimport DropArea from \"./DropArea\";\r\nimport { navigate } from \"@reach/router\";\r\nimport Help from \"./Help\";\r\n\r\n\r\n\r\nclass Board extends React.Component<BoardProps>\r\n{\r\n\r\n    board_ref = React.createRef<HTMLDivElement>();\r\n\r\n    // constructor(props: BoardProps)\r\n    //{\r\n    //    super(props);\r\n    //}\r\n\r\n    async componentDidMount()\r\n    {\r\n        if (!this.props.target_code_exists)\r\n        {\r\n            await navigate(\"/\");\r\n            await navigate(\"/\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className=\"Board\" ref={this.board_ref}>\r\n\r\n                <Help\r\n                    is_help_shown={this.props.is_help_shown}\r\n                    changeHelpVisibility={this.props.changeHelpVisibility} />\r\n\r\n                <Fireworks\r\n                    game_status={this.props.game_status} />\r\n\r\n                <div className=\"HistoryContainer\">\r\n                    <Status\r\n                        game_status={this.props.game_status} />\r\n\r\n                    <History\r\n                        history={this.props.history}\r\n                        indicators_history={this.props.indicators_history}\r\n                        max_attempts={this.props.game_settings.max_attempts}\r\n                        code_length={this.props.game_settings.code_length} />\r\n\r\n                </div>\r\n                <DropArea\r\n                    current_drop_area_state={this.props.current_drop_area_state}\r\n                    game_settings={this.props.game_settings}\r\n                    board_ref={this.board_ref}\r\n                    is_drop_area_filled={this.props.is_drop_area_filled}\r\n\r\n                    addAttemptToHistory={this.props.addAttemptToHistory}\r\n                    changeHelpVisibility={this.props.changeHelpVisibility}\r\n                    clearAttempt={this.props.clearAttempt}\r\n                    setDropTargetColor={this.props.setDropTargetColor} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Board;","//CodeBreak - GameSettings\r\nimport \"./GameSettings.scss\";\r\n\r\n\r\nfunction GameSettings(props: GameSettingsProps)\r\n{\r\n    return (<div className=\"GameSettings\">\r\n\r\n\r\n\r\n        <h2>Code Break</h2>\r\n        <h3>Game settings</h3>\r\n\r\n        <span className=\"gameSettingsGroupHeader\">Max attempts:</span>\r\n        <div className=\"gameSettingsGroup\">\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_ma_6\" name=\"max_attempts\" value=\"6\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_ma_6\">6</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_ma_8\" name=\"max_attempts\" value=\"8\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_ma_8\">8</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_ma_10\" name=\"max_attempts\" value=\"10\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_ma_10\">10</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_ma_12\" name=\"max_attempts\" value=\"12\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} defaultChecked />\r\n                <label htmlFor=\"gameSettingsInput_ma_12\">12</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_ma_14\" name=\"max_attempts\" value=\"14\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_ma_14\">14</label>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <span className=\"gameSettingsGroupHeader\">Number of colours:</span>\r\n        <div className=\"gameSettingsGroup\">\r\n\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_noc_4\" name=\"number_of_colors\" value=\"4\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_noc_4\">4</label>\r\n            </div>\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_noc_5\" name=\"number_of_colors\" value=\"5\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_noc_5\">5</label>\r\n            </div>\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_noc_6\" name=\"number_of_colors\" value=\"6\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} defaultChecked />\r\n                <label htmlFor=\"gameSettingsInput_noc_6\">6</label>\r\n            </div>\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_noc_7\" name=\"number_of_colors\" value=\"7\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_noc_7\">7</label>\r\n            </div>\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_noc_8\" name=\"number_of_colors\" value=\"8\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_noc_8\">8</label>\r\n            </div>\r\n        </div>\r\n\r\n        <span className=\"gameSettingsGroupHeader\">Code length:</span>\r\n        <div className=\"gameSettingsGroup\">\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_cl_3\" name=\"code_length\" value=\"3\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_cl_3\">3</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_cl_4\" name=\"code_length\" value=\"4\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} defaultChecked />\r\n                <label htmlFor=\"gameSettingsInput_cl_4\">4</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption hiddenOnMobile\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_cl_5\" name=\"code_length\" value=\"5\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_cl_5\">5</label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption hiddenOnMobile\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_cl_6\" name=\"code_length\" value=\"6\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_cl_6\">6</label>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <span className=\"gameSettingsGroupHeader\">Possibility of repeating colours:</span>\r\n        <div className=\"gameSettingsGroup\">\r\n            <div className=\"gameSettingsOption gameSettingsOptionLarge\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_crcic_true\" name=\"can_repeat_colors_in_code\" value=\"true\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} />\r\n                <label htmlFor=\"gameSettingsInput_crcic_true\">\r\n                    <span><i className=\"fas fa-check\" /> YES</span>\r\n                </label>\r\n            </div>\r\n\r\n            <div className=\"gameSettingsOption gameSettingsOptionLarge\">\r\n                <input type=\"radio\" className=\"gameSettingsInput\" id=\"gameSettingsInput_crcic_false\" name=\"can_repeat_colors_in_code\" value=\"false\"\r\n                    onChange={(e) => props.handleGameSettingsChange(e)} defaultChecked />\r\n                <label htmlFor=\"gameSettingsInput_crcic_false\">\r\n                    <span><i className=\"fas fa-times\" /> NO</span>\r\n                </label>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <button id=\"startGameButton\" onClick={() => props.startGame()}>Start <i className=\"fas fa-angle-double-right\"></i></button>\r\n\r\n        <footer>\r\n            &copy; 2021 Code Break &ndash; Teodor\r\n        </footer>\r\n\r\n    </div>);\r\n\r\n\r\n}\r\n\r\n\r\nexport default GameSettings;","//CodeBreak  - App\n\nimport React, { ChangeEvent } from 'react';\nimport { Router, navigate } from '@reach/router';    //RouteComponentProps, Link,\nimport './fontawesome-free-5.15.3-web/css/all.css';\nimport './App.scss';\nimport { GameStatus } from './global';\nimport Board from './Board';\nimport GameSettings from './GameSettings';\n\n\nclass App extends React.Component<AppProps, AppState>\n{\n\n    constructor(props: AppProps)\n    {\n        super(props);\n        this.state = {\n            game_settings: {    //game settings will be set later, by user\n                max_attempts: 0,\n                code_length: 0,\n                number_of_colors: 0,    //colors are numbered starting from 1 (not 0)!\n                can_repeat_colors_in_code: false,\n                first_init_happened: false\n            },\n\n            game_status: GameStatus.InProgress,\n\n            target_code: [],\n            history: [] as Array<Array<number>>, //array of arrays where each element represents single code break attempt\n            indicators_history: [],\n            current_drop_area_state: [],\n            is_drop_area_filled: false,\n            is_help_shown: false\n        }\n\n        this.handleGameSettingsChange = this.handleGameSettingsChange.bind(this);\n        this.startGame = this.startGame.bind(this);\n\n        this.addAttemptToHistory = this.addAttemptToHistory.bind(this);\n        this.changeHelpVisibility = this.changeHelpVisibility.bind(this);\n        this.clearAttempt = this.clearAttempt.bind(this);\n        this.setDropTargetColor = this.setDropTargetColor.bind(this);\n    }\n\n    componentDidMount()\n    {\n        let gs = Object.assign({}, this.state.game_settings);\n\n        if (!gs.first_init_happened)\n        {\n            gs.max_attempts = 12;\n            gs.code_length = 4;\n            gs.number_of_colors = 6;\n            gs.can_repeat_colors_in_code = false;\n            gs.first_init_happened = true;\n\n            this.setState({ game_settings: gs });\n        }\n\n\n        window.addEventListener(\"keydown\", (e) => { if (e.code == \"Escape\") { this.changeHelpVisibility(false); } });\n    }\n\n    getTargetCode(code_length: number, number_of_colors: number, can_repeat_colors_in_code: boolean): Array<number>\n    {\n        const getRandomNumber = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1) + min);\n\n        let new_code: Array<number> = [];\n        let can_repeat_colors_in_code_copy = can_repeat_colors_in_code;\n\n\n        if (number_of_colors < code_length) { can_repeat_colors_in_code_copy = true; }\n\n\n        do\n        {\n            const random_number = getRandomNumber(1, number_of_colors);\n\n            if (!can_repeat_colors_in_code_copy)\n            {\n                if (new_code.includes(random_number)) { continue; }\n            }\n            new_code.push(random_number);\n        }\n        while (new_code.length < code_length);\n\n        return new_code;\n    }\n\n    handleGameSettingsChange(e: ChangeEvent): void\n    {\n        let gs = Object.assign({}, this.state.game_settings);\n\n        const target = e.target as HTMLInputElement;\n        const name: string = target.name;\n        let value: any;\n\n        switch (name)\n        {\n            case \"max_attempts\":\n                value = parseInt(target.value);\n                gs.max_attempts = value;\n                break;\n\n            case \"code_length\":\n                value = parseInt(target.value);\n                gs.code_length = value;\n                break;\n\n            case \"number_of_colors\":\n                value = parseInt(target.value);\n                gs.number_of_colors = value;\n                break;\n\n            case \"can_repeat_colors_in_code\":\n                // eslint-disable-next-line\n                value = (target.value == \"true\") ? true : false;\n                gs.can_repeat_colors_in_code = value;\n                break;\n        }\n\n        this.setState({ game_settings: gs });\n    }\n\n    changeHelpVisibility(new_state: boolean): void\n    {\n        if (new_state)\n        {\n            this.setState({ is_help_shown: true });\n        }\n        else\n        {\n            this.setState({ is_help_shown: false });\n        }\n    }\n\n    startGame(): void\n    {\n        const gs = this.state.game_settings;\n\n        const new_target_code = this.getTargetCode(gs.code_length, gs.number_of_colors, gs.can_repeat_colors_in_code);\n\n        this.setState({\n            game_status: GameStatus.InProgress,\n            target_code: new_target_code,\n            history: [],\n            indicators_history: [],\n            current_drop_area_state: [],\n            is_drop_area_filled: false\n        });\n\n        navigate(\"/board\");\n    }\n\n    //change color of single target id\n    setDropTargetColor(drop_target_id: number, color_id: number): void\n    {\n\n        const countEmptyValuesInDropArea = (drop_area_state: Array<number>, code_length: number): number =>\n        {\n            if (!drop_area_state.length) { return 0; }\n            let not_empty = drop_area_state.reduce((prev, current) => prev + (current ? 1 : 0), 0);\n\n            const empty_cnt = code_length - not_empty;\n\n            return empty_cnt;\n        };\n\n\n        let current_codes: Array<number> = this.state.current_drop_area_state.slice();\n        current_codes[drop_target_id] = color_id;\n\n\n        this.setState({\n            current_drop_area_state: current_codes,\n            is_drop_area_filled: !countEmptyValuesInDropArea(current_codes, this.state.game_settings.code_length)\n        });\n\n\n\n    }\n\n\n\n    addAttemptToHistory(): void\n    {\n\n        if (this.state.game_status != GameStatus.InProgress) { return; }\n\n\n        if (this.state.is_drop_area_filled) //add only if filled whole code\n        {\n\n            if (this.state.history.length < this.state.game_settings.max_attempts)\n            {\n                let new_history = this.state.history.slice();\n                new_history.push(this.state.current_drop_area_state);\n\n                let indicators: IndicatorHistoryElement = this.calculateIndicators(this.state.current_drop_area_state, this.state.target_code);\n                let new_indicators_history: Array<IndicatorHistoryElement> = this.state.indicators_history.slice();\n                new_indicators_history.push(indicators);\n\n                const user_code_string = this.state.current_drop_area_state.join(\"\");\n                const target_code_string = this.state.target_code.join(\"\");\n\n\n\n                this.setState({\n                    history: new_history,\n                    indicators_history: new_indicators_history\n                },\n                    () =>\n                    {\n                        if (user_code_string === target_code_string)\n                        {\n                            //alert(\"Congratulations, you won!\");\n                            this.setState({ game_status: GameStatus.Won, is_drop_area_filled: false });\n                        }\n                        else\n                        {\n                            if (this.state.history.length == this.state.game_settings.max_attempts)\n                            {\n                                //alert(\"You lost, better luck next time\");\n                                this.setState({ game_status: GameStatus.Lost, is_drop_area_filled: false });\n                            }\n                        }\n                    });\n\n            }\n        }\n    }\n\n    clearAttempt(): void\n    {\n        this.setState({ current_drop_area_state: [], is_drop_area_filled: false });\n    }\n\n    calculateIndicators(user_attempt: Array<number>, target_code: Array<number>): IndicatorHistoryElement\n    {\n        let partialMatches = 0, fullMatches = 0;\n\n        let user_colors: Array<number> = new Array(this.state.game_settings.number_of_colors + 1).fill(0);\n        let target_colors: Array<number> = new Array(this.state.game_settings.number_of_colors + 1).fill(0);\n\n\n        //partial matches (white indicator)\n        user_attempt.forEach(el => { user_colors[el]++; });\n        target_code.forEach(el => { target_colors[el]++ });\n\n        user_colors.forEach((el, i) => { partialMatches += Math.min(user_colors[i], target_colors[i]); });\n\n        //full matches (green indicator)\n        user_attempt.forEach((el, i) =>\n        {\n            if (el === target_code[i])\n            {\n                fullMatches++;\n            }\n        });\n\n        partialMatches -= fullMatches;   //partial matches already included full matches, now we seperate them\n\n        //console.log(\"calc indicators -> user attempt: \", user_attempt, \"target code: \", target_code, \"partial/full matches: \", partialMatches, fullMatches);\n\n        return {\n            partialMatches: partialMatches,\n            fullMatches: fullMatches\n        };\n\n    }\n\n\n    render()\n    {\n        return (\n            <div className=\"App\">\n\n                <header className=\"App-header\">\n                    Code Break\n                </header>\n\n                <Router>\n                    <GameSettings path=\"/\"\n                        handleGameSettingsChange={this.handleGameSettingsChange}\n                        startGame={this.startGame} />\n\n                    <Board path=\"board\"\n                        current_drop_area_state={this.state.current_drop_area_state}\n                        game_status={this.state.game_status}\n                        game_settings={this.state.game_settings}\n                        history={this.state.history}\n                        indicators_history={this.state.indicators_history}\n                        is_drop_area_filled={this.state.is_drop_area_filled}\n                        target_code_exists={!!this.state.target_code.length}\n                        is_help_shown={this.state.is_help_shown}\n\n                        addAttemptToHistory={this.addAttemptToHistory}\n                        changeHelpVisibility={this.changeHelpVisibility}\n                        clearAttempt={this.clearAttempt}\n                        setDropTargetColor={this.setDropTargetColor}\n                    />\n                </Router>\n\n            </div>\n        );\n    }\n\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}